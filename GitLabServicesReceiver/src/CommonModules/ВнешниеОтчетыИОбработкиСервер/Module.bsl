////////////////////////////////////////////////////////////////////////////////
//
// Внешние отчеты и обработки (сервер)
// Загрузка отчетов, обработок и печатных форм из внешнего хранилища (git).
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
 
// Возвращает представление общего модуля.
// 
// Возвращаемое значение:
// 	Строка - представление общего модуля (синоним или, если его нет, то имя общего модуля);
//
// @UnitTest
//
Функция Представление() Экспорт

	Возврат Метаданные.ОбщиеМодули.ВнешниеОтчетыИОбработкиСервер.Представление();
	
КонецФункции

// Возвращает структура ответа по описанию схемы ответа REST сервиса (см. API REST сервиса)
// 
// Возвращаемое значение:
// 	Структура - описание:
// * Тип - Строка - тип ответа, "info" или "error";
// * Сообщение - Строка - текст сообщения;
//
// @UnitTest
//
Функция СтруктураОтвета() Экспорт

	Перем Результат;
	
	Результат = Новый Структура();
	Результат.Вставить( "Тип" );
	Результат.Вставить( "Сообщение" );
	
	Возврат Результат;

КонецФункции

// Поиск и замена внешних отчетов, обработок и печатных форм в справочнике "Внешние обработки" по имени файла
// с формированием результата данной замены в формате СтруктураОтвета().
//
// Параметры:
// 	ИмяФайла - Строка - полное имя файла для поиска заменяемых элементов в справочнике внешних отчетов и обработок;
// 	ДвоичныеДанные - ДвоичныеДанные - содержимое файла, заменяются найденные файлы;
// Возвращаемое значение:
// 	Результат - Структура - (См. СтруктураОтвета());
//
// @UnitTest
//
Функция ЗаменитьФайлВИнформационнойБазе( Знач ИмяФайла, Знач ДвоичныеДанные ) Экспорт
	
	Перем ИзменяемыеЭлементы;
	Перем Результат;
	
	Результат = СтруктураОтвета();

	ПроверитьКорректностьИмениФайла( ИмяФайла, Результат );
	
	Если ( Результат.Тип <> Неопределено ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;

	ИзменяемыеЭлементы = Справочники.ВнешниеОбработки.НайтиПоИмениФайлаИсточника( "%" + ИмяФайла + "%" );
	
	ПроверитьНаличиеФайловВИнформационнойБазеДляИзменения( ИзменяемыеЭлементы, Результат );
		
	Если ( Результат.Тип <> Неопределено ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Точка расширения. Точка интеграции с конфигурацией.		
	УстановитьДанныеВХранилищеЗначений( ИзменяемыеЭлементы, ИмяФайла, ДвоичныеДанные, Результат );
	
	Возврат Результат;

КонецФункции

// Включает/отключает функционал загрузки внешних отчетов и обработок из внешнего хранилища
// с формированием результата данной замены в формате СтруктураОтвета().
// 
// Параметры:
// 	Значение - Булево - Истина - включить, иначе - отключить;
// Возвращаемое значение:
// 	Структура - Структура - (См. СтруктураОтвета());
//
// @UnitTest
//
Функция ПереключитьФункциональнуюОпциюЗагрузкиФайлов( Знач Значение ) Экспорт
	
	Перем Результат;
	
	// Точка расширения. Точка интеграции с конфигурацией.
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Значение );
	
	Результат = СтруктураОтвета();
	
	Результат.Тип = "info";
	
	Если Константы.ЗагружатьФайлыИзВнешнегоХранилища.Получить() Тогда
		
		Результат.Сообщение = НСтр("ru = 'Включено.'");
		
	Иначе
		
		Результат.Сообщение = НСтр("ru = 'Отключено.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьКорректностьИмениФайла( Знач ИмяФайла, Результат )

	Если ( ПустаяСтрока(ИмяФайла) ) Тогда
		
		Результат.Тип = "error";
		Результат.Сообщение = НСтр("ru = 'Обновление не выполнено. Не указано имя файла для замены.'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеФайловВИнформационнойБазеДляИзменения( Знач ТаблицаЗначений, Результат )
	
	Если ( ТаблицаЗначений.Количество() = 0 ) Тогда
				
		Результат.Тип = "info";
		Результат.Сообщение = НСтр("ru = 'Внешние отчеты и обработки для замены не найдены.'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДанныеВХранилищеЗначений(Знач ИзменяемыеЭлементы, Знач ИмяФайла, Знач ДвоичныеДанные, Результат)
	
	Перем АдресВременногоХранилища;
	Перем ИмяВременногоФайла;
	Перем НовыйФайл;
	Перем ОписаниеНовогоФайла;

	АдресВременногоХранилища = ПоместитьВоВременноеХранилище( ДвоичныеДанные );
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла( "epf" );
	НовыйФайл = Новый Файл( ИмяВременногоФайла );
	
	НачатьТранзакцию();
	
	Попытка
		
		ДвоичныеДанные.Записать( НовыйФайл.ПолноеИмя );
		ОписаниеНовогоФайла = Справочники.ВнешниеОбработки.ОписаниеФайлаИсточникаДанных( НовыйФайл );
		ОписаниеНовогоФайла.Имя = ИмяФайла; 
		Справочники.ВнешниеОбработки.УстановитьДанныеВХранилищеЗначенийСписком( ИзменяемыеЭлементы,
																				ОписаниеНовогоФайла,
																				АдресВременногоХранилища );
		
		Результат.Тип = "info";
		Результат.Сообщение = НСтр( "ru = 'Файлы успешно заменены.'" );
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		УдалитьФайлы( ИмяВременногоФайла );
		УдалитьИзВременногоХранилища( АдресВременногоХранилища );
		
		Если ( ТранзакцияАктивна() ) Тогда
			
			ОтменитьТранзакцию();
			
			Результат.Тип = "error";
			Результат.Сообщение = НСтр( "ru = 'Что-то пошло не так...'" );
			
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	УдалитьФайлы( ИмяВременногоФайла );
	УдалитьИзВременногоХранилища( АдресВременногоХранилища );
	
КонецПроцедуры

#КонецОбласти
