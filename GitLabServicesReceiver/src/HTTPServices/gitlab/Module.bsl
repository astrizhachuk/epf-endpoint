#Область СлужебныйПрограммныйИнтерфейс

Функция VersionGET( Запрос )
	
	Перем Ответ;
	
	Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияHTTP("OK") );
	Ответ.УстановитьТелоИзСтроки( JSONСхемаОтвета( ВерсияКонфигурации() ) );
	
	Возврат Ответ;
	
КонецФункции

Функция UpdatePOST( Запрос )
	
	Перем ИмяФайла;
	Перем Данные;
	Перем Результат;
	Перем Ответ;

	Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияHTTP("OK") );
	
	ПроверитьЗапросUpdate( Запрос, Ответ );

	Если ( КодыСостоянияHTTPКлиентСерверПовтИсп.IsOk(Ответ.КодСостояния) ) Тогда
		
		ИмяФайла = РаскодироватьСтроку( Запрос.Заголовки.Получить("Name"), СпособКодированияСтроки.КодировкаURL );
		Данные = Запрос.ПолучитьТелоКакДвоичныеДанные();
		Результат = ВнешниеОтчетыИОбработкиСервер.ЗаменитьФайлВИнформационнойБазе( ИмяФайла, Данные );
		СформироватьОтветJSON( Ответ, Результат );
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция SwitchPOST( Запрос )
	
	Перем Value;
	Перем Результат;
	Перем Ответ;

	Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияHTTP("OK") );
	
	ПроверитьЗапросSwitch( Запрос, Ответ );
	
	Если ( КодыСостоянияHTTPКлиентСерверПовтИсп.IsOk(Ответ.КодСостояния) ) Тогда
		
		Value = Запрос.Заголовки.Получить("Value");
		Value = ?(Value = "true", Истина, Ложь);
		Результат = ВнешниеОтчетыИОбработкиСервер.ПереключитьФункциональнуюОпциюЗагрузкиФайлов( Value );
		СформироватьОтветJSON( Ответ, Результат );
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиКодСостоянияHTTP( Знач Идентификатор )
	
	Возврат КодыСостоянияHTTPКлиентСерверПовтИсп.НайтиКодПоИдентификатору( Идентификатор );
	
КонецФункции

Функция СхемаОтвета()

	Возврат "{
			|	""type"": ""%1"",
			|	""message"": ""%2""
			|}";

КонецФункции

// Формирует строку в формате json по схеме ответа REST сервиса (См. СхемаОтвета()).
// 
// Параметры:
// 	Данные - Структура - данные для заполнения схемы:
// 	* Тип - Строка - тип ответа (info, error);
// 	* Сообщение - Строка - текст сообщения;
// Возвращаемое значение:
// 	Строка - строка в формате json (см. API REST сервиса)
//
Функция JSONСхемаОтвета( Знач Данные )
	
	Если ( ТипЗнч(Данные) <> Тип("Структура")
		ИЛИ НЕ Данные.Свойство("Тип")
		ИЛИ НЕ Данные.Свойство("Сообщение") ) Тогда
			
		Возврат "{}";
			
	Иначе
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( СхемаОтвета(), Данные.Тип, Данные.Сообщение );
		
	КонецЕсли;
	
КонецФункции

Процедура СформироватьОтветJSON( Ответ, Знач Результат )
	
	Ответ.Заголовки.Вставить( "Content-Type", "application/json" );
	Ответ.УстановитьТелоИзСтроки( JSONСхемаОтвета( Результат ) );
	
КонецПроцедуры

// Проверка структуры запроса и обязательные поля для end-point update.
// 
// Параметры:
// 	Запрос - HTTPСервисЗапрос - запрос;
// 	Ответ - HTTPСервисОтвет - ответ;
//
Процедура ПроверитьЗапросUpdate( Знач Запрос, Ответ )

	ПроверитьAccessToken( Запрос, Ответ );
	ОпределитьДоступностьФункциональностиЗагрузкиИзВнешнегоРепозитория( Ответ );
	ПроверитьЗаголовкиЗапросаUpdate( Запрос, Ответ );

КонецПроцедуры

// Проверка структуры запроса и обязательные поля для end-point switch.
// 
// Параметры:
// 	Запрос - HTTPСервисЗапрос - запрос;
// 	Ответ - HTTPСервисОтвет - ответ;
//
Процедура ПроверитьЗапросSwitch( Знач Запрос, Ответ )

	ПроверитьAccessToken( Запрос, Ответ );
	ПроверитьЗаголовкиЗапросаSwitch( Запрос, Ответ );

КонецПроцедуры

Функция ВерсияКонфигурации()
	
	Перем Результат;
	
	Результат = ВнешниеОтчетыИОбработкиСервер.СтруктураОтвета();
	Результат.Тип = "info";
	Результат.Сообщение = ОбщегоНазначения.МетаданныеВерсия();
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЗаголовкиЗапросаUpdate( Знач Запрос, Ответ )
	
	Перем ContentLength;
	Перем Name;
	
	Если ( НЕ КодыСостоянияHTTPКлиентСерверПовтИсп.IsOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Name = Запрос.Заголовки.Получить("Name");

	Если ( Name = Неопределено ИЛИ Name = "" ) Тогда

		ОтветНаЗапросСОшибочнымЗаголовком( Ответ, "Name" );
		
	КонецЕсли;
	
	ContentLength = Запрос.Заголовки.Получить("Content-Length");
	
	Если ( ContentLength = Неопределено ИЛИ ContentLength = 0 ) Тогда
		
		ОтветНаЗапросСОшибочнымЗаголовком( Ответ, "Content-Length" );

	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаголовкиЗапросаSwitch( Знач Запрос, Ответ )
	
	Перем Value;
	
	Value = Запрос.Заголовки.Получить("Value");

	Если ( Value = Неопределено ) Тогда

		ОтветНаЗапросСОшибочнымЗаголовком( Ответ, "Value" );
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ОпределитьДоступностьФункциональностиЗагрузкиИзВнешнегоРепозитория( Ответ )
	
	Если ( НЕ КодыСостоянияHTTPКлиентСерверПовтИсп.IsOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ( НЕ ПолучитьФункциональнуюОпцию("ЗагружатьФайлыИзВнешнегоХранилища") ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияHTTP("LOCKED") );
		Ответ.Причина = "Loading of the files is disabled";

		ЗаписьЖурналаРегистрации( ВнешниеОтчетыИОбработкиСервер.Представление(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Отключен функционал загрузки из внешнего хранилища.'") );
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьAccessToken( Знач Запрос, Ответ )
	
	Перем AccessToken;
	Перем RequestToken;
	
	Если ( НЕ КодыСостоянияHTTPКлиентСерверПовтИсп.IsOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	AccessToken = Константы.AccessTokenВнешнееХранилищеОтчетовИОбработок.Получить();
	
	Если ( НЕ ЗначениеЗаполнено(AccessToken) ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияHTTP("FORBIDDEN") );

		ЗаписьЖурналаРегистрации( ВнешниеОтчетыИОбработкиСервер.Представление(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Не настроена авторизация.'") );
		
		Возврат;
		
	КонецЕсли;
	
	RequestToken = Запрос.Заголовки.Получить("Token");
	
	Если ( RequestToken = Неопределено ИЛИ AccessToken <> RequestToken ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияHTTP("UNAUTHORIZED") );

		ЗаписьЖурналаРегистрации( ВнешниеОтчетыИОбработкиСервер.Представление(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Неверный access token.'") );
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтветНаЗапросСОшибочнымЗаголовком( Ответ, Представление )
	
	Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияHTTP("BAD_REQUEST") );
	
	ЗаписьЖурналаРегистрации( ВнешниеОтчетыИОбработкиСервер.Представление(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный запрос на обновление внешнего отчета или обработки (%1).'"),
			Представление ) );
		
КонецПроцедуры

#КонецОбласти