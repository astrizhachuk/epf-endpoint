#Область СлужебныйПрограммныйИнтерфейс

// @unit-test
Процедура FindByGUIDGet404NotFound(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	GUID = "00000000-0000-0000-0000-000000000000";
	URL = "http://localhost/test/hs/epf/" + GUID;
	
	// when
	Результат = HTTPConnector.Get(URL);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 404);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(НЕ ЗначениеЗаполнено(ТелоОтвета));	

КонецПроцедуры

// @unit-test
Процедура FindByGUIDGet500BadGUID(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	ТЕКСТ_ОШИБКИ = НСтр( "ru = '(УникальныйИдентификатор)';en = '(GUID)'" );
	GUID = "0000-bad";
	URL = "http://localhost/test/hs/epf/" + GUID;
	
	// when
	Результат = HTTPConnector.Get(URL);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 500);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, ТЕКСТ_ОШИБКИ);	

КонецПроцедуры

// @unit-test
Процедура FindByGUIDGet200Ok(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	Обработка1 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку("ЭтоОбработка1.epf");
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка1, "ЭтоОбработка2.epf");
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка1, "ЭтоОбработка3.epf");
	GUID = Обработка1.Ссылка.УникальныйИдентификатор();
	URL = "http://localhost/test/hs/epf/" + GUID;
	
	// when
	Результат = HTTPConnector.Get(URL);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, GUID);	

КонецПроцедуры

// @unit-test
Процедура FindByFilenameGet400BadRequest(Фреймворк) Экспорт
	
	// given
	URL = "http://localhost/test/hs/epf/findByFilename";
	
	// when
	Результат = HTTPConnector.Get(URL);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 400);

КонецПроцедуры

// @unit-test
Процедура FindByFilenameGet404NotFound(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	ИмяФайла = "ЭтоОбработка2.epf";
	URL = "http://localhost/test/hs/epf/findByFilename?query=" + ИмяФайла;
	
	// when
	Результат = HTTPConnector.Get(URL);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 404);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(НЕ ЗначениеЗаполнено(ТелоОтвета));	

КонецПроцедуры

// @unit-test
Процедура FindByFilenameGet200Ok(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	
	ИмяФайла2 = "ЭтоОбработка2.epf";
	Обработка1 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку("ЭтоОбработка1.epf");
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка1, ИмяФайла2);
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка1, "ЭтоОбработка3.epf");
	Обработка2 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку(ИмяФайла2);
	Обработка3 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку("");

	URL = "http://localhost/test/hs/epf/findByFilename?query=" + ИмяФайла2;
	
	// when
	Результат = HTTPConnector.Get(URL);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, Строка(Обработка1.Ссылка.УникальныйИдентификатор()) );
	Фреймворк.ПроверитьВхождение(ТелоОтвета, Строка(Обработка2.Ссылка.УникальныйИдентификатор()) );		
	Фреймворк.Проверить(СтрНайти(ТелоОтвета, Строка(Обработка3.Ссылка.УникальныйИдентификатор())) = 0);
	
КонецПроцедуры

// @unit-test
Процедура InfobaseGet200Ok(Фреймворк) Экспорт
	
	// given
	URL = "http://localhost/test/hs/infobase";
	
	// when
	Результат = HTTPConnector.Get(URL);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """config_version"":");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, Метаданные.Версия);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """config_version"":");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """File=");
	
КонецПроцедуры

// @unit-test
Процедура SwitchPost400BadRequestMissingValue(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Истина );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/switch";
	Тело = "";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 400);
	
КонецПроцедуры

// @unit-test
Процедура SwitchPost400BadRequestBadValue(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Истина );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/switch";
	Тело = "";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Заголовки.Вставить("value", "true");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 400);
	
КонецПроцедуры

// @unit-test
Процедура SwitchPost401Unauthorized(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/switch";
	Тело = "{}";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "fake");
	Заголовки.Вставить("value", "on");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);

	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 401);
	
КонецПроцедуры

// @unit-test
Процедура SwitchPost403Forbidden(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/switch";
	Тело = "{}";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Заголовки.Вставить("value", "on");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);

	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 403);
	
КонецПроцедуры

// @unit-test
Процедура SwitchPost200Enabled(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/switch";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Заголовки.Вставить("value", "on");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, "", Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "загрузка файлов включена");

КонецПроцедуры

// @unit-test
Процедура SwitchPost200Disabled(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Истина );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/switch";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Заголовки.Вставить("value", "off");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, "", Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "загрузка файлов отключена");

КонецПроцедуры



// @unit-test:fast
Процедура SetTokenPost400BadRequestMissingValue(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/setToken";
	Тело = "";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 400);
	Фреймворк.ПроверитьРавенство(Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Получить(), "token" );
	
КонецПроцедуры

// @unit-test:fast
Процедура SetTokenPost400BadRequestEmptyValue(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/setToken";
	Тело = "";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Заголовки.Вставить("value", "");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 400);
	Фреймворк.ПроверитьРавенство(Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Получить(), "token" );
	
КонецПроцедуры

// @unit-test
Процедура SetTokenPost401Unauthorized(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/setToken";
	Тело = "{}";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "fake");
	Заголовки.Вставить("value", "new token");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);

	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 401);
	Фреймворк.ПроверитьРавенство(Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Получить(), "token" );
	
КонецПроцедуры

// @unit-test
Процедура SetTokenPost200OkInitToken(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/setToken";
	Тело = "{}";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "");
	Заголовки.Вставить("value", "new token");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);

	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "установлен новый токен");
	Фреймворк.ПроверитьРавенство(Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Получить(), "new token" );
	
КонецПроцедуры

// @unit-test
Процедура SetTokenPost200OkChange(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/setToken";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Заголовки.Вставить("value", "new token");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, "", Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "установлен новый токен");
	Фреймворк.ПроверитьРавенство(Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Получить(), "new token" );

КонецПроцедуры

// @unit-test
Процедура UploadFilePost400BadRequest(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Истина );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/uploadFile";
	Тело = "";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Length", 0);
	Заголовки.Вставить("token", "token");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 400);
	
КонецПроцедуры

// @unit-test
Процедура UploadFilePost401Unauthorized(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/uploadFile";
	Тело = "{}";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "fake");
	Заголовки.Вставить("name", "%D0%B8%D0%BC%D1%8F%20%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 401);
	
КонецПроцедуры

// @unit-test
Процедура UploadFilePost403Forbidden(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/uploadFile";
	Тело = "{}";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Заголовки.Вставить("name", "%D0%B8%D0%BC%D1%8F%20%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 403);
	
КонецПроцедуры

// @unit-test
Процедура UploadFilePost423Locked(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Ложь );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/uploadFile";
	Тело = "{}";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Заголовки.Вставить("name", "%D0%B8%D0%BC%D1%8F%20%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 423);
	
КонецПроцедуры

// @unit-test
Процедура UploadFilePost404NotFound(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Истина );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/uploadFile";
	Тело = "{""type"":""test""}";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Заголовки.Вставить("name", "%D0%B8%D0%BC%D1%8F%20%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 404);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(НЕ ЗначениеЗаполнено(ТелоОтвета));	

КонецПроцедуры

// @unit-test:fast
Процедура UploadFilePost200Ok(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	
	ИмяФайла2 = "ЭтоОбработка2.epf";
	Обработка1 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку("ЭтоОбработка1.epf");
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка1, ИмяФайла2);
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка1, "ЭтоОбработка3.epf");
	Обработка2 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку(ИмяФайла2);
	Обработка3 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку("");
	
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить( Истина );
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить( "token" );
	
	URL = "http://localhost/test/hs/epf";
	URL = URL + "/uploadFile";
	Тело = "{""type"":""test""}";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("token", "token");
	Заголовки.Вставить("name", "%D0%AD%D1%82%D0%BE%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B02.epf");
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Заголовки", Заголовки);
	Дополнительно.Вставить("Таймаут", 5);
	
	// when
	Результат = HTTPConnector.Post(URL, Тело, Дополнительно);

	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, Строка(Обработка1.Ссылка.УникальныйИдентификатор()) );
	Фреймворк.ПроверитьВхождение(ТелоОтвета, Строка(Обработка2.Ссылка.УникальныйИдентификатор()) );		
	Фреймворк.Проверить(СтрНайти(ТелоОтвета, Строка(Обработка3.Ссылка.УникальныйИдентификатор())) = 0);
	
КонецПроцедуры

#КонецОбласти