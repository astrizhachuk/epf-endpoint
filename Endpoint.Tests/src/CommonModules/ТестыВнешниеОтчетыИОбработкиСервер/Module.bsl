#Область СлужебныйПрограммныйИнтерфейс

// @unit-test:fast
Процедура НайтиПоИмениФайлаНайдено(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	
	// Пустой файл без имени файла	
	Обработка1 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку("");
	// Файл в элементе справочника
	ИмяФайла2 = "ЭтоОбработка2.epf";	
	Обработка2 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку(ИмяФайла2);
	// Файл в двух строках таблицы [Обработка2=Обработка3.ТЧ.Строка1]	
	Обработка3 = Справочники.ВнешниеОбработки.СоздатьЭлемент();
	Обработка3.Наименование = "Тест_ТолькоТабличнаяЧасть";
	Обработка3.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка3, ИмяФайла2);
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка3, "ЭтоОбработка3.epf");
	
	// when
	Результат = ВнешниеОтчетыИОбработки.НайтиПоИмениФайла(ИмяФайла2);
	
	// then
	Фреймворк.ПроверитьИстину(ЗначениеЗаполнено(Результат));
	Фреймворк.ПроверитьИстину(Результат.Количество() = 2);	
	Фреймворк.ПроверитьРавенство(Результат[0].guid, Строка(Обработка2.Ссылка.УникальныйИдентификатор()));	
	Фреймворк.ПроверитьРавенство(Результат[0].filename, ИмяФайла2);
	Фреймворк.ПроверитьРавенство(Результат[0].comment, "Размер: такой-то... для " + ИмяФайла2);
	Фреймворк.ПроверитьРавенство(Результат[1].guid, Строка(Обработка3.Ссылка.УникальныйИдентификатор()));
	Фреймворк.ПроверитьРавенство(Результат[1].table, "Принадлежность");
	Фреймворк.ПроверитьРавенство(Результат[1].line, 1);
	Фреймворк.ПроверитьРавенство(Результат[1].filename, ИмяФайла2);
	Фреймворк.ПроверитьРавенство(Результат[1].comment, "Размер: такой-то... для " + ИмяФайла2);

КонецПроцедуры

// @unit-test:fast
Процедура НайтиПоИмениФайлаНеНайдено(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	ИмяФайла = "ТакогоФайлаНеСуществует.epf";
	
	// when
	Результат = ВнешниеОтчетыИОбработки.НайтиПоИмениФайла(ИмяФайла);
	
	// then
	Фреймворк.ПроверитьИстину(НЕ ЗначениеЗаполнено(Результат));

КонецПроцедуры

// @unit-test
Процедура НайтиПоИдентификаторуФайлВРеквизите(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	ИмяФайла = "";
	Обработка1 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку(ИмяФайла);
	GUID = Обработка1.Ссылка.УникальныйИдентификатор();
	
	// when
	Результат = ВнешниеОтчетыИОбработки.НайтиПоИдентификатору(GUID);
	
	// then
	Фреймворк.ПроверитьИстину(Результат.Количество() > 0);
	Фреймворк.ПроверитьРавенство(Результат.guid, Строка(GUID));	
	Фреймворк.ПроверитьРавенство(Результат.filename, ИмяФайла);
	Фреймворк.ПроверитьРавенство(Результат.comment, "Размер: такой-то... для " + ИмяФайла);
	Фреймворк.ПроверитьИстину(НЕ ЗначениеЗаполнено(Результат.tables));				

КонецПроцедуры

// @unit-test
Процедура НайтиПоИдентификаторуФайлВРеквизитеИТабличнойЧасти(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	ИмяФайла1 = "ЭтоОбработка1.epf";
	ИмяФайла2 = "ЭтоОбработка2.epf";
	ИмяФайла3 = "ЭтоОбработка3.epf";
	Обработка1 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку(ИмяФайла1);
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка1, ИмяФайла2);
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка1, ИмяФайла3);
	GUID = Обработка1.Ссылка.УникальныйИдентификатор();
	
	// when
	Результат = ВнешниеОтчетыИОбработки.НайтиПоИдентификатору(GUID);
	
	// then
	Фреймворк.ПроверитьИстину(Результат.Количество() > 0);
	Фреймворк.ПроверитьРавенство(Результат.guid, Строка(GUID));	
	Фреймворк.ПроверитьРавенство(Результат.filename, ИмяФайла1);
	Фреймворк.ПроверитьРавенство(Результат.comment, "Размер: такой-то... для " + ИмяФайла1);
	Фреймворк.ПроверитьИстину(ЗначениеЗаполнено(Результат.tables));
	Фреймворк.ПроверитьРавенство(Результат.tables[0].guid, Строка(GUID));
	Фреймворк.ПроверитьРавенство(Результат.tables[0].table, "Принадлежность");
	Фреймворк.ПроверитьРавенство(Результат.tables[0].line, 1);
	Фреймворк.ПроверитьРавенство(Результат.tables[0].filename, ИмяФайла2);
	Фреймворк.ПроверитьРавенство(Результат.tables[0].comment, "Размер: такой-то... для " + ИмяФайла2);
	Фреймворк.ПроверитьРавенство(Результат.tables[1].guid, Строка(GUID));					
	Фреймворк.ПроверитьРавенство(Результат.tables[1].table, "Принадлежность");
	Фреймворк.ПроверитьРавенство(Результат.tables[1].line, 2);
	Фреймворк.ПроверитьРавенство(Результат.tables[1].filename, ИмяФайла3);
	Фреймворк.ПроверитьРавенство(Результат.tables[1].comment, "Размер: такой-то... для " + ИмяФайла3);	
	
КонецПроцедуры

// @unit-test
Процедура НайтиПоИдентификаторуНеНайдено(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();
	GUID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	// when
	Результат = ВнешниеОтчетыИОбработки.НайтиПоИдентификатору(GUID);
	
	// then
	Фреймворк.ПроверитьИстину(НЕ ЗначениеЗаполнено(Результат));

КонецПроцедуры

// @unit-test:fast
Процедура ОбновитьФайлВИнформационнойБазе(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();

	ИмяФайла2 = "ЭтоОбработка2.epf";	
	ТелоФайла4 = ПолучитьДвоичныеДанныеИзСтроки("ЭтоОбработка4.epf", КодировкаТекста.UTF8);
	
	// Пустой файл без имени файла	
	Обработка1 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку("");
	// Файл в элементе справочника	
	Обработка2 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку(ИмяФайла2);
	// Файл в двух строках таблицы [Обработка2=Обработка3.ТЧ.Строка1]	
	Обработка3 = Справочники.ВнешниеОбработки.СоздатьЭлемент();
	Обработка3.Наименование = "Тест_ТолькоТабличнаяЧасть";
	Обработка3.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка3, ИмяФайла2);
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка3, "ЭтоОбработка3.epf");
	
	ОбновляемыеОбработки = Новый Массив();
	Описание1 = Новый Структура();
	Описание1.Вставить( "guid", Строка(Обработка2.Ссылка.УникальныйИдентификатор()) );
	Описание1.Вставить( "filename", ИмяФайла2 );
	Описание1.Вставить( "comment", "Размер: такой-то... для " + ИмяФайла2 );
	ОбновляемыеОбработки.Добавить(Описание1);
	Описание2 = Новый Структура();
	Описание2.Вставить( "guid", Строка(Обработка3.Ссылка.УникальныйИдентификатор()) );
	Описание2.Вставить( "table", "Принадлежность" );
	Описание2.Вставить( "line", 1 );
	Описание2.Вставить( "filename", ИмяФайла2 );
	Описание2.Вставить( "comment", "Размер: такой-то... для " + ИмяФайла2 );
	ОбновляемыеОбработки.Добавить(Описание2);
	
	// when
	Результат = ВнешниеОтчетыИОбработки.ОбновитьФайлВИнформационнойБазе(ОбновляемыеОбработки, ТелоФайла4);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.uploaded.Количество(), 2);
	Фреймворк.ПроверитьРавенство(Результат.errors.Количество(), 0);
	Обработка1.Прочитать();
	Обработка2.Прочитать();
	Обработка3.Прочитать();
	Фреймворк.ПроверитьРавенство(
		ПолучитьСтрокуИзДвоичныхДанных(Обработка1.ХранилищеВнешнейОбработки.Получить()),
		"");
	Фреймворк.ПроверитьРавенство(
		ПолучитьСтрокуИзДвоичныхДанных(Обработка2.ХранилищеВнешнейОбработки.Получить()),
		"ЭтоОбработка4.epf");
	Фреймворк.ПроверитьРавенство(
		ПолучитьСтрокуИзДвоичныхДанных(Обработка3.Принадлежность[0].ХранилищеВнешнейОбработки.Получить()),
		"ЭтоОбработка4.epf");		
	Фреймворк.ПроверитьРавенство(
		ПолучитьСтрокуИзДвоичныхДанных(Обработка3.Принадлежность[1].ХранилищеВнешнейОбработки.Получить()),
		"ЭтоОбработка3.epf");
	
КонецПроцедуры

// @unit-test:fast
Процедура ОбновитьФайлВИнформационнойБазеОшибка(Фреймворк) Экспорт
	
	// given
	ТестыПодготовкаДанных.ОчиститьСправочникВнешниеОбработки();

	ИмяФайла1 = "ЭтоОбработка1.epf";
	Обработка1 = ТестыПодготовкаДанных.СоздатьВнешнююОбработку(ИмяФайла1);
	ТестыПодготовкаДанных.ДобавитьФайлВнешнейОбработкиВТабличнуюЧасть(Обработка1, ИмяФайла1);
	
	ЗаменяемыеОбработки = Новый Массив();
	Описание1 = Новый Структура();
	Описание1.Вставить( "guid", Строка(Обработка1.Ссылка.УникальныйИдентификатор()) );
	Описание1.Вставить( "table", "Принадлежность" );
	Описание1.Вставить( "line", -1 );
	Описание1.Вставить( "filename", ИмяФайла1 );
	Описание1.Вставить( "comment", "Размер: такой-то... для " + ИмяФайла1);
	ЗаменяемыеОбработки.Добавить(Описание1);
	
	ТелоФайла2 = ПолучитьДвоичныеДанныеИзСтроки("ЭтоОбработка2.epf", КодировкаТекста.UTF8);
	
	// when
	Результат = ВнешниеОтчетыИОбработки.ОбновитьФайлВИнформационнойБазе(ЗаменяемыеОбработки, ТелоФайла2);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.uploaded.Количество(), 0);
	Фреймворк.ПроверитьРавенство(Результат.errors.Количество(), 1);
	Обработка1.Прочитать();
	Фреймворк.ПроверитьРавенство(
		ПолучитьСтрокуИзДвоичныхДанных(Обработка1.ХранилищеВнешнейОбработки.Получить()),
		ИмяФайла1);
	Фреймворк.ПроверитьРавенство(
		ПолучитьСтрокуИзДвоичныхДанных(Обработка1.Принадлежность[0].ХранилищеВнешнейОбработки.Получить()),
		ИмяФайла1);
	Фреймворк.ПроверитьЛожь(ПустаяСтрока(Результат.errors[0].message));
	Фреймворк.ПроверитьРавенство(Результат.errors[0].error.guid, Строка(Обработка1.Ссылка.УникальныйИдентификатор()));			
	
КонецПроцедуры

// @unit-test
Процедура ВключитьЗагрузкуФайлов(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить(Ложь);

	// when
	Результат = ВнешниеОтчетыИОбработки.УстановитьЗагружатьФайлыИзВнешнегоХранилища(Истина);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.message, "загрузка файлов включена");
	Фреймворк.ПроверитьРавенство(Константы.ЗагружатьФайлыИзВнешнегоХранилища.Получить(), Истина);
	
КонецПроцедуры

// @unit-test
Процедура ВыключитьЗагрузкуФайлов(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить(Истина);

	// when
	Результат = ВнешниеОтчетыИОбработки.УстановитьЗагружатьФайлыИзВнешнегоХранилища(Ложь);
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.message, "загрузка файлов отключена");
	Фреймворк.ПроверитьРавенство(Константы.ЗагружатьФайлыИзВнешнегоХранилища.Получить(), Ложь);
	
КонецПроцедуры

// @unit-test:fast
Процедура УстановитьТокенДоступаЗагрузкиФайловИзВнешнегоХранилища(Фреймворк) Экспорт
	
	// given
	Константы.ЗагружатьФайлыИзВнешнегоХранилища.Установить(Ложь);
	Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Установить("token");

	// when
	Результат = ВнешниеОтчетыИОбработки.УстановитьТокенДоступаЗагрузкиФайловИзВнешнегоХранилища("new token");
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.message, "установлен новый токен");
	Фреймворк.ПроверитьРавенство(Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Получить(), "new token");
	
КонецПроцедуры

#КонецОбласти