////////////////////////////////////////////////////////////////////////////////
//
// Внешние отчеты и обработки (сервер)
// Загрузка отчетов, обработок и печатных форм из внешнего хранилища (git).
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
 
// Возвращает представление общего модуля.
// 
// Возвращаемое значение:
// 	Строка - представление общего модуля (синоним или, если его нет, то имя общего модуля);
//
// @UnitTest
//
Функция Представление() Экспорт

	Возврат Метаданные.ОбщиеМодули.ВнешниеОтчетыИОбработкиСервер.Представление();
	
КонецФункции


// Возвращает структура ответа по описанию схемы ответа REST сервиса (см. API REST сервиса)
// 
// Возвращаемое значение:
// 	Структура - описание:
// * Тип - Строка - тип ответа, "info" или "error";
// * Сообщение - Строка - текст сообщения;
//
// @UnitTest
//
Функция СтруктураОтвета() Экспорт

	Перем Результат;
	
	Результат = Новый Структура();
	Результат.Вставить( "Тип" );
	Результат.Вставить( "Сообщение" );
	
	Возврат Результат;

КонецФункции

// Формирует строку в формате json по схеме ответа REST сервиса (См. СхемаОтвета()).
// 
// Параметры:
// 	Данные - Структура - данные для заполнения схемы:
// 	* Тип - Строка - тип ответа (info, error);
// 	* Сообщение - Строка - текст сообщения;
// Возвращаемое значение:
// 	Строка - строка в формате json (см. API REST сервиса)
//
// @UnitTest
//
Функция JSONСхемаОтвета( Знач Данные ) Экспорт
	
	Если ( ТипЗнч(Данные) <> Тип("Структура")
		ИЛИ НЕ Данные.Свойство("Тип")
		ИЛИ НЕ Данные.Свойство("Сообщение") ) Тогда
			
		Возврат "{}";
			
	Иначе
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( СхемаОтвета(), Данные.Тип, Данные.Сообщение );
		
	КонецЕсли;
	
КонецФункции

// Проверка запроса: авторизация, корректные данные в заголовке и теле запроса.
// 
// Параметры:
// 	Запрос - HTTPСервисЗапрос - запрос;
// 	Ответ - HTTPСервисОтвет - ответ;
//
// @UnitTest
//
Процедура ПроверитьЗапрос( Знач Запрос, Ответ ) Экспорт

	ОпределитьДоступностьФункциональностиЗагрузкиИзВнешнегоРепозитория( Ответ );
	ПроверитьAccessToken( Запрос, Ответ );
	ПроверитьЗаголовкиЗапроса( Запрос, Ответ );

КонецПроцедуры

// Поиск и замена внешних отчетов, обработок и печатных форм в справочнике "Внешние обработки" по имени файла.
//
// Параметры:
// 	ИмяФайла - Строка - полное имя файла для поиска заменяемых элементов в справочнике внешних отчетов и обработок;
// 	ДвоичныеДанные - ДвоичныеДанные - содержимое файла, заменяются найденные файлы;
// Возвращаемое значение:
// 	Результат - Структура - (См. СтруктураОтвета() )
//
// @UnitTest
//
Процедура ОбновитьДанныеВХранилищеЗначенийПоИмениФайла( Знач ИмяФайла, Знач ДвоичныеДанные, Результат ) Экспорт
	
	Перем ИзменяемыеЭлементы;

	ПроверитьКорректностьИмениФайла( ИмяФайла, Результат );
	
	Если ( Результат.Тип <> Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;

	ИзменяемыеЭлементы = Справочники.ВнешниеОбработки.НайтиПоИмениФайлаИсточника( "%" + ИмяФайла + "%" );
	
	ПроверитьВозможностьИзмененияДанных( ИзменяемыеЭлементы, Результат );
		
	Если ( Результат.Тип <> Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Точка расширения. Точка интеграции с конфигурацией.		
	УстановитьДанныеВХранилищеЗначений( ИзменяемыеЭлементы, ИмяФайла, ДвоичныеДанные, Результат );

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СхемаОтвета()

	Возврат "{
			|	""type"": ""%1"",
			|	""message"": ""%2""
			|}";

КонецФункции

Процедура ПроверитьЗаголовкиЗапроса( Знач Запрос, Ответ )
	
	Перем ContentLength;
	Перем Name;
	
	Name = Запрос.Заголовки.Получить("Name");

	Если ( Name = Неопределено ИЛИ Name = "" ) Тогда

		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().BAD_REQUEST );
		
		ЗаписьЖурналаРегистрации( ВнешниеОтчетыИОбработкиСервер.Представление(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Неверный запрос на обновление внешнего отчета или обработки (Name).'") );
		
	КонецЕсли;
	
	ContentLength = Запрос.Заголовки.Получить("Content-Length");
	
	Если ( ContentLength = Неопределено ИЛИ ContentLength = 0 ) Тогда

		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().BAD_REQUEST );
		
		ЗаписьЖурналаРегистрации( ВнешниеОтчетыИОбработкиСервер.Представление(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Неверный запрос на обновление внешнего отчета или обработки (Content-Length).'") );
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьДоступностьФункциональностиЗагрузкиИзВнешнегоРепозитория( Ответ )
	
	Если ( НЕ ПолучитьФункциональнуюОпцию("ЗагружатьФайлыИзВнешнегоХранилища") ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().LOCKED );
		Ответ.Причина = "Loading of the files is disabled";

		ЗаписьЖурналаРегистрации( ВнешниеОтчетыИОбработкиСервер.Представление(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Отключен функционал загрузки из внешнего хранилища.'") );
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьAccessToken( Знач Запрос, Ответ )
	
	Перем AccessToken;
	Перем RequestToken;
	
	AccessToken = Константы.AccessTokenВнешнееХранилищеОтчетовИОбработок.Получить();
	
	Если ( НЕ ЗначениеЗаполнено(AccessToken) ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().FORBIDDEN );

		ЗаписьЖурналаРегистрации( ВнешниеОтчетыИОбработкиСервер.Представление(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Не настроена авторизация.'") );
		
		Возврат;
		
	КонецЕсли;
	
	RequestToken = Запрос.Заголовки.Получить("Token");
	
	Если ( RequestToken = Неопределено ИЛИ AccessToken <> RequestToken ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().UNAUTHORIZED );

		ЗаписьЖурналаРегистрации( ВнешниеОтчетыИОбработкиСервер.Представление(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Неверный access token.'") );
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьИмениФайла( Знач ИмяФайла, Результат )

	Если ( ПустаяСтрока(ИмяФайла) ) Тогда
		
		Результат.Тип = "error";
		Результат.Сообщение = НСтр("ru = 'Обновление не выполнено. Не указано имя файла для замены.'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияДанных( Знач ТаблицаЗначений, Результат )
	
	Если ( ТаблицаЗначений.Количество() = 0 ) Тогда
				
		Результат.Тип = "info";
		Результат.Сообщение = НСтр("ru = 'Внешние отчеты и обработки для замены не найдены.'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДанныеВХранилищеЗначений(Знач ИзменяемыеЭлементы, Знач ИмяФайла, Знач ДвоичныеДанные, Результат)
	
	Перем АдресВременногоХранилища;
	Перем ИмяВременногоФайла;
	Перем НовыйФайл;
	Перем ОписаниеНовогоФайла;

	АдресВременногоХранилища = ПоместитьВоВременноеХранилище( ДвоичныеДанные );
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла( "epf" );
	НовыйФайл = Новый Файл( ИмяВременногоФайла );
	
	НачатьТранзакцию();
	
	Попытка
		
		ДвоичныеДанные.Записать( НовыйФайл.ПолноеИмя );
		ОписаниеНовогоФайла = Справочники.ВнешниеОбработки.ОписаниеФайлаИсточникаДанных( НовыйФайл );
		ОписаниеНовогоФайла.Имя = ИмяФайла; 
		Справочники.ВнешниеОбработки.УстановитьДанныеВХранилищеЗначенийСписком( ИзменяемыеЭлементы,
																				ОписаниеНовогоФайла,
																				АдресВременногоХранилища );
		
		Результат.Тип = "info";
		Результат.Сообщение = НСтр( "ru = 'Файлы успешно заменены.'" );
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		УдалитьФайлы( ИмяВременногоФайла );
		УдалитьИзВременногоХранилища( АдресВременногоХранилища );
		
		Если ( ТранзакцияАктивна() ) Тогда
			
			ОтменитьТранзакцию();
			
			Результат.Тип = "error";
			Результат.Сообщение = НСтр( "ru = 'Что-то пошло не так...'" );
			
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	УдалитьФайлы( ИмяВременногоФайла );
	УдалитьИзВременногоХранилища( АдресВременногоХранилища );
	
КонецПроцедуры

#КонецОбласти
