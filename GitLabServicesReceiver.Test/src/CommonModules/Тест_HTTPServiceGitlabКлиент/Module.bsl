#Область СлужебныйПрограммныйИнтерфейс

// @unit-test
Процедура Тест_HTTPServiceGitlabResponseVersion(Фреймворк) Экспорт
	
	СерверСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("СерверСервисаGitLab");
	ПутьДоСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("ПутьДоСервисаGitLab");
	Соединение = Новый HTTPСоединение(СерверСервиса, , , , , 5);

	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/version";
	
	HTTPОтвет = Соединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 200, "Веб-сервис не отвечает.");
	
	// BSLLS:UsingHardcodeNetworkAddress-выкл.
	ЭталонJSON =	"{
					|	""type"": ""info"",
					|	""message"": ""10.3.5.77""
					|}";
	
	Фреймворк.ПроверитьРавенство(HTTPОтвет.ПолучитьТелоКакСтроку(), ЭталонJSON, "Ответ веб-сервиса неверный.");
	// BSLLS:UsingHardcodeNetworkAddress-вкл.
	
КонецПроцедуры

// @unit-test
Процедура Тест_HTTPServiceGitlabError423(Фреймворк) Экспорт
	
	СерверСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("СерверСервисаGitLab");
	ПутьДоСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("ПутьДоСервисаGitLab");
	
	Соединение = Новый HTTPСоединение(СерверСервиса, , , , , 5);

	// Есть ошибка 423 LOCKED
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Ложь );
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("token");

	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/update";
	HTTPЗапрос = ЭталонHTTPЗапросUpdate(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 423);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	HTTPЗапрос = ЭталонHTTPЗапросSwitch(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьНеРавенство(HTTPОтвет.КодСостояния, 423);
		
	// Нет ошибка 423 LOCKED
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Истина );
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/update";	
	HTTPЗапрос = ЭталонHTTPЗапросUpdate(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьНеРавенство(HTTPОтвет.КодСостояния, 423);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	HTTPЗапрос = ЭталонHTTPЗапросSwitch(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьНеРавенство(HTTPОтвет.КодСостояния, 423);
	
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Ложь );		

КонецПроцедуры

// @unit-test
Процедура Тест_HTTPServiceGitlabError403(Фреймворк) Экспорт
	
	СерверСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("СерверСервисаGitLab");
	ПутьДоСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("ПутьДоСервисаGitLab");
	
	Соединение = Новый HTTPСоединение(СерверСервиса, , , , , 5);

	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Истина );
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("");
	
	// Есть ошибка 403 FORBIDDEN
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/update";
	HTTPЗапрос = ЭталонHTTPЗапросUpdate(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 403);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	HTTPЗапрос = ЭталонHTTPЗапросSwitch(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 403);
	
	// Нет ошибки 403 FORBIDDEN
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("token");

	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/update";
	HTTPЗапрос = ЭталонHTTPЗапросUpdate(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьНеРавенство(HTTPОтвет.КодСостояния, 403);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	HTTPЗапрос = ЭталонHTTPЗапросSwitch(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьНеРавенство(HTTPОтвет.КодСостояния, 403);
	
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("");
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Ложь );

КонецПроцедуры

// @unit-test
Процедура Тест_HTTPServiceGitlabError401(Фреймворк) Экспорт
	
	СерверСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("СерверСервисаGitLab");
	ПутьДоСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("ПутьДоСервисаGitLab");
	
	Соединение = Новый HTTPСоединение(СерверСервиса, , , , , 5);
	
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Истина );
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("token");
	
	// Есть ошибка 401 UNAUTHORIZED
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/update";
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Length", 50);
	Заголовки.Вставить("Token", "false");
	Заголовки.Вставить("Name", "%D0%B8%D0%BC%D1%8F%20%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8");
	HTTPЗапрос.Заголовки = Заголовки;
	ДвоичныеДанные = Новый ДвоичныеДанные(Фреймворк.Объект.КаталогПроекта + "\test\Файлы\Внешняя Обработка 1.epf");
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 401);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Token", "false");
	Заголовки.Вставить("Value", "true");
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 401);
	
	// Нет ошибки 401 UNAUTHORIZED
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("token");
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/update";
	HTTPЗапрос = ЭталонHTTPЗапросUpdate(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьНеРавенство(HTTPОтвет.КодСостояния, 401);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	HTTPЗапрос = ЭталонHTTPЗапросSwitch(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьНеРавенство(HTTPОтвет.КодСостояния, 401);
	
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("");
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Ложь );

КонецПроцедуры

// @unit-test
Процедура Тест_HTTPServiceGitlabError400(Фреймворк) Экспорт
	
	СерверСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("СерверСервисаGitLab");
	ПутьДоСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("ПутьДоСервисаGitLab");
	
	Соединение = Новый HTTPСоединение(СерверСервиса, , , , , 5);

	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Истина );
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("token");
	
	// Есть ошибка
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/update";
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Length", 0);
	Заголовки.Вставить("Token", "token");
	HTTPЗапрос.Заголовки = Заголовки;
	ДвоичныеДанные = Новый ДвоичныеДанные(Фреймворк.Объект.КаталогПроекта + "\test\Файлы\Пустой.txt");
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 400);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Token", "token");
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 400);
	
	// Нет ошибки
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/update";
	HTTPЗапрос = ЭталонHTTPЗапросUpdate(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьНеРавенство(HTTPОтвет.КодСостояния, 400);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	HTTPЗапрос = ЭталонHTTPЗапросSwitch(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьНеРавенство(HTTPОтвет.КодСостояния, 400);
	
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("");
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Ложь );

КонецПроцедуры

// @unit-test
Процедура Тест_HTTPServiceGitlab200(Фреймворк) Экспорт
	
	СерверСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("СерверСервисаGitLab");
	ПутьДоСервиса = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("ПутьДоСервисаGitLab");
	
	Соединение = Новый HTTPСоединение(СерверСервиса, , , , , 5);

	// 200
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Истина );
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("token");

	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/update";
	HTTPЗапрос = ЭталонHTTPЗапросUpdate(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 200);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.Заголовки.Получить("Content-Type"), "application/json");
	
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Ложь );	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	HTTPЗапрос = ЭталонHTTPЗапросSwitch(Фреймворк, HTTPЗапрос);
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 200);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.Заголовки.Получить("Content-Type"), "application/json");
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	Фреймворк.ПроверитьИстину(СтрНайти(ТелоОтвета, "Включено") > 0);
	Фреймворк.ПроверитьРавенство(Тест_HTTPServiceGitlabВызовСервера.ПолучитьЗагружатьФайлыИзВнешнегоХранилища(), Истина);
	
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Истина );	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	HTTPЗапрос = ЭталонHTTPЗапросSwitch(Фреймворк, HTTPЗапрос, "false");
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 200);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.Заголовки.Получить("Content-Type"), "application/json");
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	Фреймворк.ПроверитьИстину(СтрНайти(ТелоОтвета, "Отключено") > 0);
	Фреймворк.ПроверитьРавенство(Тест_HTTPServiceGitlabВызовСервера.ПолучитьЗагружатьФайлыИзВнешнегоХранилища(), Ложь);
	
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Ложь );	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПутьДоСервиса + "/switch";
	HTTPЗапрос = ЭталонHTTPЗапросSwitch(Фреймворк, HTTPЗапрос, "false");
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.КодСостояния, 200);
	Фреймворк.ПроверитьРавенство(HTTPОтвет.Заголовки.Получить("Content-Type"), "application/json");
	Фреймворк.ПроверитьРавенство(Тест_HTTPServiceGitlabВызовСервера.ПолучитьЗагружатьФайлыИзВнешнегоХранилища(), Ложь);
	
	Тест_HTTPServiceGitlabВызовСервера.УстановитьAccessTokenВнешнееХранилищеОтчетовИОбработок("");
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Ложь );

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭталонHTTPЗапросUpdate(Знач Фреймворк, Знач HTTPЗапрос)
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Token", "token");
	Заголовки.Вставить("Name", "%D0%B8%D0%BC%D1%8F%20%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8");
	HTTPЗапрос.Заголовки = Заголовки;
	ДвоичныеДанные = Новый ДвоичныеДанные(Фреймворк.Объект.КаталогПроекта + "\test\Файлы\Внешняя Обработка 1.epf");
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
	
	Возврат HTTPЗапрос;
	
КонецФункции

Функция ЭталонHTTPЗапросSwitch(Знач Фреймворк, Знач HTTPЗапрос, Знач Статус = "true")
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Token", "token");
	Заголовки.Вставить("Value", Статус);
	HTTPЗапрос.Заголовки = Заголовки;
	
	Возврат HTTPЗапрос;
	
КонецФункции

#КонецОбласти