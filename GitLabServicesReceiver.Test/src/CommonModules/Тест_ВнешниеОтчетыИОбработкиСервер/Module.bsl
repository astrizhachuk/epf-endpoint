#Область СлужебныйПрограммныйИнтерфейс

// @unit-test
Процедура Тест_Представление(Фреймворк) Экспорт

	Результат = ВнешниеОтчетыИОбработкиСервер.Представление();
	Фреймворк.ПроверитьРавенство(Результат, "Внешние отчеты и обработки (сервер)");
	
КонецПроцедуры

// @unit-test
Процедура Тест_СтруктураОтвета(Фреймворк) Экспорт

	Результат = ВнешниеОтчетыИОбработкиСервер.СтруктураОтвета();
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 2);
	Фреймворк.ПроверитьИстину(Результат.Свойство("Тип"));
	Фреймворк.ПроверитьИстину(Результат.Свойство("Сообщение"));
	
КонецПроцедуры

// @unit-test
Процедура Тест_ОбновитьДанныеВХранилищеЗначенийПоИмениФайла(Фреймворк) Экспорт

	// BSLLS-выкл.
	НачатьТранзакцию();
	// BSLLS-вкл. 
	
	Попытка
		ДвоичныеДанные = Новый ДвоичныеДанные(Фреймворк.КаталогПроекта + "\test\Файлы\Внешняя Обработка 1.epf");
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
		ВременныйФайл = Новый Файл(ИмяВременногоФайла);
		ДвоичныеДанные.Записать(ВременныйФайл.ПолноеИмя);
		ОписаниеФайла = Справочники.ВнешниеОбработки.ОписаниеФайлаИсточникаДанных(ВременныйФайл);

		НовыйЭлемент = Справочники.ВнешниеОбработки.СоздатьЭлемент();
		НовыйЭлемент.ОбменДанными.Загрузка = Истина;
		НовыйЭлемент.Наименование = "Тест1";
		НовыйЭлемент.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
		НовыйЭлемент.Записать();
		Справочники.ВнешниеОбработки.УстановитьДанныеВХранилищеЗначений(НовыйЭлемент.Ссылка, ОписаниеФайла, Адрес, 0);
		
		ДвоичныеДанныеНовые = Новый ДвоичныеДанные(Фреймворк.КаталогПроекта + "\test\Файлы\Внешняя Обработка 2.epf");
		Результат = ВнешниеОтчетыИОбработкиСервер.ЗаменитьФайлВИнформационнойБазе(ОписаниеФайла.Имя, ДвоичныеДанныеНовые);
																					
		Фреймворк.ПроверитьРавенство(Результат.Тип, "info");
		Фреймворк.ПроверитьРавенство(Результат.Сообщение, "Файлы успешно заменены.");
		
		НовыйЭлемент.Прочитать();
		Фреймворк.ПроверитьРавенство(НовыйЭлемент.ХранилищеВнешнейОбработки.Получить().Размер(), 5920);
		
		Если ТранзакцияАктивна() Тогда
			УдалитьФайлы(ИмяВременногоФайла);
			УдалитьИзВременногоХранилища(Адрес);
			ОтменитьТранзакцию();
		КонецЕсли;
	
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			УдалитьФайлы(ИмяВременногоФайла);
			УдалитьИзВременногоХранилища(Адрес);
			// BSLLS-выкл.
			ОтменитьТранзакцию();
			// BSLLS-вкл.
		КонецЕсли;
		
		ВызватьИсключение;
			
	КонецПопытки;
	
КонецПроцедуры

Процедура Тест_ПереключитьФункциональнуюОпциюЗагрузкиФайлов(Фреймворк) Экспорт
	
	Тест_HTTPServiceGitlabВызовСервера.УстановитьЗагружатьФайлыИзВнешнегоХранилища(Ложь);
	
	Результат = ВнешниеОтчетыИОбработкиСервер.ПереключитьФункциональнуюОпциюЗагрузкиФайлов(Истина);
	Фреймворк.ПроверитьРавенство(Результат.Тип, "info");
	Фреймворк.ПроверитьРавенство(Результат.Сообщение, "Включено.");
	
	Результат = Тест_HTTPServiceGitlabВызовСервера.ПолучитьЗагружатьФайлыИзВнешнегоХранилища();
	Фреймворк.ПроверитьИстину(Результат);
	
	Результат = ВнешниеОтчетыИОбработкиСервер.ПереключитьФункциональнуюОпциюЗагрузкиФайлов(Ложь);
	Фреймворк.ПроверитьРавенство(Результат.Тип, "info");
	Фреймворк.ПроверитьРавенство(Результат.Сообщение, "Выключено.");
	
	Результат = Тест_HTTPServiceGitlabВызовСервера.ПолучитьЗагружатьФайлыИзВнешнегоХранилища();
	Фреймворк.ПроверитьЛожь(Результат);
	
КонецПроцедуры

#КонецОбласти