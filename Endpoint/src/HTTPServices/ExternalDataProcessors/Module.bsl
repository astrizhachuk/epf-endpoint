#Область СлужебныеПроцедурыИФункции

#Область Методы

Функция StatusGet(Запрос)
	
	Перем Ответ;
	
	Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("OK") );
	
	HTTPServices.SetBodyAsJSON( Ответ, ВнешниеОтчетыИОбработки.ПолучитьЗагружатьФайлыИзВнешнегоХранилища() );
	
	Возврат Ответ;
	
КонецФункции

Функция FindByGUIDGet( Запрос )

	Перем Ответ;	
	Перем Идентификатор;
	Перем Результат;
	
	Идентификатор = Запрос.ПараметрыURL.Получить( "GUID" );
	Идентификатор = Новый УникальныйИдентификатор( Идентификатор );
	
	Результат = ВнешниеОтчетыИОбработки.НайтиПоИдентификатору( Идентификатор );

	Если ( ЗначениеЗаполнено(Результат) ) Тогда

		Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("OK") );		
		HTTPServices.SetBodyAsJSON( Ответ, Результат );	
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("NOT_FOUND") );	
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция FindByFilenameGet( Запрос )

	Перем Ответ;	
	Перем ИмяФайла;
	Перем Результат;
	
	Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("OK") );
	
	ИмяФайла = Запрос.ПараметрыЗапроса.Получить( "query" );
	
	Если ( ИмяФайла = Неопределено ИЛИ ИмяФайла = "" ) Тогда
		
		СформироватьОтветОшибкаВЗапросе( Ответ, НСтр("ru = 'параметры запроса';en = 'query'"), "query" );
		
		Возврат Ответ;
		
	КонецЕсли;
	
	Результат = ВнешниеОтчетыИОбработки.НайтиПоИмениФайла( ИмяФайла );
	
	Если ( ЗначениеЗаполнено(Результат) ) Тогда

		Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("OK") );		
		HTTPServices.SetBodyAsJSON( Ответ, Результат );	
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("NOT_FOUND") );	
		
	КонецЕсли;

	Возврат Ответ;
	
КонецФункции

Функция UploadFilePost( Запрос )

	Перем Ответ;	
	Перем ИмяФайла;
	Перем ОбновляемыеОбработки;
	Перем Данные;
	Перем Результат;

	Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("OK") );
	
	ИмяФайла = Запрос.Заголовки.Получить( "name" );
	
	Если ( ИмяФайла = Неопределено ИЛИ ПустаяСтрока(ИмяФайла) ) Тогда
	
		СформироватьОтветОшибкаВЗапросе( Ответ, НСтр("ru = 'заголовок';en = 'header'"), "name" );
		
		Возврат Ответ;
		
	КонецЕсли;
	
	ПроверитьТокенДоступа( Запрос, Ответ );
	ПроверитьДоступностьЗагрузкиФайлов( Ответ );
	
	Если ( КодыСостояния().IsOk(Ответ.КодСостояния) ) Тогда
		
		ИмяФайла = РаскодироватьСтроку( ИмяФайла, СпособКодированияСтроки.КодировкаURL );
		ОбновляемыеОбработки = ВнешниеОтчетыИОбработки.НайтиПоИмениФайла( ИмяФайла );
	
		Если ( ЗначениеЗаполнено(ОбновляемыеОбработки) ) Тогда
	
			Данные = Запрос.ПолучитьТелоКакДвоичныеДанные();
			Результат = ВнешниеОтчетыИОбработки.ОбновитьФайлВИнформационнойБазе( ОбновляемыеОбработки, Данные );
			HTTPServices.SetBodyAsJSON( Ответ, Результат );	
			
		Иначе
			
			Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("NOT_FOUND") );	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция SwitchPost( Запрос )

	Перем Ответ;	
	Перем Значение;
	Перем Результат;

	Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("OK") );
	
	Значение = Запрос.Заголовки.Получить( "value" );
	
	Если ( Значение = Неопределено ИЛИ НЕ (Значение = "on" ИЛИ Значение = "off") ) Тогда
	
		СформироватьОтветОшибкаВЗапросе( Ответ, НСтр("ru = 'заголовок';en = 'header'"), "value" );
		
		Возврат Ответ;
		
	КонецЕсли;
	
	ПроверитьТокенДоступа( Запрос, Ответ );
	
	Если ( КодыСостояния().IsOk(Ответ.КодСостояния) ) Тогда
		
		Значение = ?(Значение = "on", Истина, Ложь);
		Результат = ВнешниеОтчетыИОбработки.УстановитьЗагружатьФайлыИзВнешнегоХранилища( Значение );
		HTTPServices.SetBodyAsJSON( Ответ, Результат );
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция SetTokenPost(Запрос)

	Перем Ответ;
	Перем Значение;
	Перем Результат;

	Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("OK") );
	
	Значение = Запрос.Заголовки.Получить( "value" );
	
	Если ( Значение = Неопределено ИЛИ ПустаяСтрока(Значение) ) Тогда
	
		СформироватьОтветОшибкаВЗапросе( Ответ, НСтр("ru = 'заголовок';en = 'header'"), "value" );
		
		Возврат Ответ;
		
	КонецЕсли;
	
	ПроверитьТокенДоступа( Запрос, Ответ );
	
	Если ( КодыСостояния().IsForbidden(Ответ.КодСостояния) ИЛИ КодыСостояния().IsOk(Ответ.КодСостояния) ) Тогда
		
		// Случай первой установки нового токена (инициализация), когда токен в ИБ еще пустой.
		Если ( КодыСостояния().IsForbidden(Ответ.КодСостояния) ) Тогда
			
			Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("OK") );
			
		КонецЕсли;

		Результат = ВнешниеОтчетыИОбработки.УстановитьТокенДоступаЗагрузкиФайловИзВнешнегоХранилища( Значение );
		HTTPServices.SetBodyAsJSON( Ответ, Результат );
			
	КонецЕсли;

	Возврат Ответ;
	
КонецФункции

#КонецОбласти

Функция Представление()
	
	Возврат Метаданные.HTTPСервисы.ExternalDataProcessors.Представление();
	
КонецФункции

Процедура ДобавитьИнформациюВЖурналРегистрации( Знач ТекстСообщения )
	
	ЗаписьЖурналаРегистрации( Представление(), УровеньЖурналаРегистрации.Информация, , , ТекстСообщения );
	
КонецПроцедуры

Процедура СформироватьОтветОшибкаВЗапросе( Ответ, Знач Тип, Знач Параметр )
	
	Перем ТекстСообщения;
	
	Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("BAD_REQUEST") );

	ТекстСообщения = НСтр(
		"ru = 'ошибка (%1): %2';
		|en = 'error (%1): %2'" );
		
		ТекстСообщения = СтрШаблон( ТекстСообщения, Тип, Параметр);

		ДобавитьИнформациюВЖурналРегистрации( ТекстСообщения );
		
КонецПроцедуры

Функция КодыСостояния()
	
	Возврат КодыСостоянияHTTPКлиентСерверПовтИсп;
	
КонецФункции

Функция НайтиКодСостоянияОтвета( Знач Идентификатор )
	
	Возврат КодыСостояния().НайтиКодПоИдентификатору( Идентификатор );
	
КонецФункции

#Область Проверки

Процедура ПроверитьТокенДоступа( Знач Запрос, Ответ )
	
	Перем ТокенДоступаИзБазы;
	Перем ТокенДоступаИзЗапроса;
	
	СООБЩЕНИЕ_НЕТ_ТОКЕНА = НСтр( "ru = 'не установлен токен доступа';en = 'access token not set'" );
	СООБЩЕНИЕ_НЕТ_АУТЕНТИФИКАЦИИ = НСтр( "ru = 'аутентификация не пройдена';en = 'not authorized'" );
	
	Если ( НЕ КодыСостояния().IsOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТокенДоступаИзБазы = Константы.ТокенДоступаЗагрузкиФайловИзВнешнегоХранилища.Получить();
	
	Если ( НЕ ЗначениеЗаполнено(ТокенДоступаИзБазы) ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("FORBIDDEN") );
		ДобавитьИнформациюВЖурналРегистрации( СООБЩЕНИЕ_НЕТ_ТОКЕНА );
		
		Возврат;
		
	КонецЕсли;
	
	ТокенДоступаИзЗапроса = Запрос.Заголовки.Получить("token");
	
	Если ( ТокенДоступаИзЗапроса = Неопределено ИЛИ ТокенДоступаИзБазы <> ТокенДоступаИзЗапроса ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("UNAUTHORIZED") );
		ДобавитьИнформациюВЖурналРегистрации( СООБЩЕНИЕ_НЕТ_АУТЕНТИФИКАЦИИ );
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДоступностьЗагрузкиФайлов( Ответ )
	
	СООБЩЕНИЕ_ОТКЛЮЧЕНА_ЗАГРУЗКА = НСтр( "ru = 'не включена загрузка файлов';en = 'file upload is disabled'" );
	
	Если ( НЕ КодыСостояния().IsOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ( НЕ Константы.ЗагружатьФайлыИзВнешнегоХранилища.Получить() ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( НайтиКодСостоянияОтвета("LOCKED") );
		Ответ.Причина = "file upload is disabled";
		ДобавитьИнформациюВЖурналРегистрации( СООБЩЕНИЕ_ОТКЛЮЧЕНА_ЗАГРУЗКА );
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти